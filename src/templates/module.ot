import * as Edm from './edmTypes';
import * as Base from './Base';

{{#each allSchemas}}
// @ts-ignore
import * as {{joinNamespace this.Namespace}} from './{{joinNamespace this.Namespace}}';
{{/each}}

// export namespace {{this.Namespace}} {

    {{#each schema.EntityTypes}}
    export interface {{this.Name}}{{#if this.BaseTypeFullName}} extends {{this.BaseTypeFullName}}{{/if}} {
        {{#each this.Properties}}
        {{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}};
        {{/each}}
        {{#each this.NavigationProperties}}
        {{this.Name}}{{#if Nullable}}?{{/if}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}; // remove namespace here
        {{/each}}
        {{#if this.OpenType}}[x: string]: any;{{/if}}
    }
    {{/each}}

    // Complex types
    {{#each schema.ComplexTypes}}
    export interface {{this.Name}} {
        {{#each this.Properties}}
        {{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}};
        {{/each}}
        {{#if this.OpenType}}[x: string]: any;{{/if}}
    }
    {{/each}}

    // Enum Types
    {{#each schema.EnumTypes}}
    // Enum Values: {{#each this.Members}}{{this.Key}} = {{this.Value}}{{#unless @last}}, {{/unless}}{{/each}}
    export type {{this.Name}} = {{#each this.Members}}"{{this.Key}}"{{#unless @last}} | {{/unless}}{{/each}};
    {{/each}}

    // Entity container
    {{#if schema.EntityContainer}}
    export class {{schema.EntityContainer.Name}} extends Base.ProxyBase {
        constructor(address: string, name?: string, additionalHeaders?: Base.Header) {
            super(address, name, additionalHeaders);
            {{#each schema.EntityContainer.EntitySets}}
            this.{{this.Name}} = new {{this.Name}}EntitySet("{{this.Name}}", address, "{{this.EntityType.Key.Name}}", additionalHeaders);
            {{/each}}
        }
        {{#each schema.EntityContainer.EntitySets}}
        {{this.Name}}: {{this.Name}}EntitySet;
        {{/each}}
        
        // Unbound Functions

        {{#each this.EntityContainer.FunctionImports}}
        {{this.Name}}({{#each this.Function.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.Function.ReturnType.Name}}> {
            return new Promise<{{this.Function.ReturnType.Name}}>((resolve, reject) => {
                let request: Request = {
                    headers: this.Headers,
                    method: "GET",
                    requestUri: this.Address + "/{{this.Function.Name}}({{~#each this.Function.Parameters}}{{this.Name}}="+{{this.Name}}+"{{#unless @last}},{{/unless}}{{~/each}})",
                }
                oData.request(request, (data, response) => {
                    resolve(data.value || data);
                }, (error) => {
                    console.error(error.statusText);
                    reject(error);
                });
            });
        }
        {{/each}}

        //Unbound Actions

        {{#each this.EntityContainer.ActionImports}}
        {{this.Name}}({{#each this.Action.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.Action.ReturnType.Name}}> {
            return new Promise<{{this.Action.ReturnType.Name}}>((resolve, reject) => {
                let request: Request = {
                    headers: this.Headers,
                    method: "POST",
                    requestUri: this.Address + "/{{this.Action.Name}}()",
                    data: {
                        {{#each this.Action.Parameters}}
                        {{this.Name}}: {{this.Name}},
                        {{/each}}
                    },
                }
                oData.request(request, (data, response) => {
                    resolve(data.value || data);
                }, (error) => {
                    console.error(error.statusText);
                    reject(error);
                });
            });
        }
        {{/each}}
    }
    {{/if}}
    //EntitySets
    {{#each schema.EntityContainer.EntitySets as |eset|}}
    export class {{this.Name}}EntitySet extends Base.EntitySet<{{splitNameSpaceAndType this.EntityType.Fullname}}> {
        constructor(name: string, address: string, key: string, additionalHeaders?: Base.Header) {
            super(name, address, key, additionalHeaders);
        }

        {{#if this.EntityType.Actions.length}}// Bound to entity Actions{{/if}}
        {{#each this.EntityType.Actions}}
        {{this.Name}}({{#each this.Parameters}}{{#if @first}}key: {{eset.EntityType.Key.Type.Name}}{{else}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.ReturnType.Name}}> {
            return new Promise<{{this.ReturnType.Name}}>((resolve, reject) => {
                let request: Request = {
                    headers: this.Headers,
                    method: "POST",
                    requestUri: this.Address + "(" + key + ")/{{schema.Namespace}}.{{this.Name}}()",
                    data: {
                        {{~#each this.Parameters}}{{~#unless @first}}
                        {{this.Name}}: {{this.Name}},
                        {{~/unless}}{{~/each}}
                    },
                }
                oData.request(request, (data, response) => {
                    resolve(data.value || data);
                }, (error) => {
                    console.error(error.statusText);
                    reject(error);
                });
            });
        }
        {{/each}}
        {{#if this.EntityType.Functions.length}}// Bound to entity Functions{{/if}}
        {{#each this.EntityType.Functions}}
        {{this.Name}}({{#each this.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.ReturnType.Name}}> {
            return new Promise<{{this.ReturnType.Name}}>((resolve, reject) => {
                let request: Request = {
                    headers: this.Headers,
                    method: "GET",
                    requestUri: this.Address + "(" + {{this.Parameters.0.Name}} + ")/{{schema.Namespace}}.{{this.Name}}({{~#each this.Parameters}}{{#unless @first}}{{this.Name}}="+{{this.Name}}+"{{#unless @last}},{{/unless}}{{/unless}}{{~/each}})",
                }
                oData.request(request, (data, response) => {
                    resolve(data.value || data);
                }, (error) => {
                    console.error(error.statusText);
                    reject(error);
                });
            });
        }
        {{/each}}
    }
    {{/each}}