import * as Edm from './edmTypes';
import * as Base from './Base';

import { Observable } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';

{{#each allSchemas}}
// @ts-ignore
import * as {{joinNamespace this.Namespace}} from './{{joinNamespace this.Namespace}}';
{{/each}}

{{#each schema.EntityTypes}}
export interface {{this.Name}}{{#if this.BaseTypeFullName}} extends {{this.BaseTypeFullName}}{{/if}} {
    {{#each this.Properties}}
    {{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}};
    {{/each}}
    {{#each this.NavigationProperties}}
    {{this.Name}}{{#if Nullable}}?{{/if}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}; // remove namespace here
    {{/each}}
    {{#if this.OpenType}}[x: string]: any;{{/if}}
}
{{/each}}

// Complex types
{{#each schema.ComplexTypes}}
export interface {{this.Name}} {
    {{#each this.Properties}}
    {{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}};
    {{/each}}
    {{#if this.OpenType}}[x: string]: any;{{/if}}
}
{{/each}}

// Enum Types
{{#each schema.EnumTypes}}
// Enum Values: {{#each this.Members}}{{this.Key}} = {{this.Value}}{{#unless @last}}, {{/unless}}{{/each}}
export type {{this.Name}} = {{#each this.Members}}"{{this.Key}}"{{#unless @last}} | {{/unless}}{{/each}};
{{/each}}

// Entity container
{{#if schema.EntityContainer}}
export class {{schema.EntityContainer.Name}} extends Base.ProxyBase {
    constructor(protected http: HttpClient, address: string, name?: string, additionalHeaders?: Base.Header) {
        super(address, name, additionalHeaders);
        {{#each schema.EntityContainer.EntitySets}}
        this.{{this.Name}} = new {{this.Name}}EntitySet("{{this.Name}}", address, "{{this.EntityType.Key.Name}}", http, additionalHeaders);
        {{/each}}
    }
    {{#each schema.EntityContainer.EntitySets}}
    {{this.Name}}: {{this.Name}}EntitySet;
    {{/each}}
    
    // Unbound Functions

    {{#each this.EntityContainer.FunctionImports}}
    {{this.Name}}({{#each this.Function.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Observable<{{this.Function.ReturnType.Name}}{{#if this.Function.ReturnType.IsCollection}}[]{{/if}}> {
        let request: Base.Request = {
            headers: this.Headers,
            method: "GET",
            requestUri: this.Address + "/{{this.Function.Name}}({{~#each this.Function.Parameters}}{{this.Name}}="+{{this.Name}}+"{{#unless @last}},{{/unless}}{{~/each}})",
        };
        return Base.oData.request(request, this.http);
    }
    {{/each}}

    //Unbound Actions

    {{#each this.EntityContainer.ActionImports}}
    {{this.Name}}({{#each this.Action.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Observable<{{this.Action.ReturnType.Name}}{{#if this.Action.ReturnType.IsCollection}}[]{{/if}}> {
        let request: Base.Request = {
            headers: this.Headers,
            method: "POST",
            requestUri: this.Address + "/{{this.Action.Name}}()",
            data: {
                {{#each this.Action.Parameters}}
                {{this.Name}}: {{this.Name}},
                {{/each}}
            },
        };
        return Base.oData.request(request, this.http);
    }
    {{/each}}
}
{{/if}}
//EntitySets
{{#each schema.EntityContainer.EntitySets as |eset|}}
export class {{this.Name}}EntitySet extends Base.EntitySet<{{splitNameSpaceAndType this.EntityType.Fullname}}> {
    constructor(name: string, address: string, key: string, http: HttpClient, additionalHeaders?: Base.Header) {
        super(name, address, key, http, additionalHeaders);
    }

    {{#if this.Actions.length}}// Bound to entity Actions{{/if}}
    {{#each this.Actions}}
    {{this.Name}}({{#each this.Parameters}}{{#if @first}}{{#unless this.IsBoundToCollection}}key: {{eset.EntityType.Key.Type.Name}}{{/unless}}{{else}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Observable<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
        const data = {
            {{#each this.Parameters}}
            {{#unless this.IsBoundToCollection}}
            {{~#unless @first}}
            {{this.Name}}{{#unless @last}},{{/unless}}
            {{~/unless}}
            {{else}}
            {{this.Name}}{{#unless @last}},{{/unless}}
            {{/unless}}                
            {{/each}}
        };
        {{#if this.IsBoundToCollection}}const key = null;{{/if}}
        return this.Action<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>("{{#if schema.Namespace}}{{schema.Namespace}}.{{/if}}{{this.Name}}", key + "", data);        
    }
    {{/each}}
    {{#if this.Functions.length}}// Bound to entity Functions{{/if}}
    {{#each this.Functions}}
    {{this.Name}}({{#each this.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Observable<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
        const data = {
            {{~#if this.IsBoundToCollection}}
            {{~#each this.Parameters}}
            {{this.Name}}{{#unless @last}},{{/unless}}
            {{~/each}}
            {{~else}}
            {{~#each this.Parameters}}
            {{~#unless @first}}
            {{this.Name}}{{#unless @last}},{{/unless}}
            {{~/unless}}
            {{~/each}}
            {{~/if}}
        };
        const key = {{#unless this.IsBoundToCollection}}`${ {{this.Parameters.0.Name}} }`{{else}}null{{/unless}};
        return this.Function<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>("{{#if schema.Namespace}}{{schema.Namespace}}.{{/if}}{{this.Name}}", key + "", data);        
    }
    {{/each}}
}
{{/each}}