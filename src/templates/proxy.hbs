{{Header}}

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

export enum Method {
    GET, POST, PUT, PATCH, DELETE
}

export class ProxyBase {
    constructor(public readonly Address: string, public readonly Name?: string, additonalHeaders?: Header) {
        this.Name = this.Name || "ProxyService";

        this.Headers = { "Content-Type": "application/json", Accept: "application/json" };

        for (var attrname in additonalHeaders) { this.Headers[attrname] = additonalHeaders[attrname]; };
    }

    /**
        * All headers appended to each request.
        * 
        * @type {Header}
        * @memberOf EntitySet
        */
    readonly Headers: Header;
}

export abstract class ODataQueryOptionBase {
    private query: string[] = [];

    protected resolveODataOptions(): string {
        if (this.query.length > 0)
            return "?" + this.query.join("&");
        else
            return "";
    }

    protected addToQuery(element: string) {
        this.query.push(element);
    }
    protected emptyQuery(): void {
        this.query = [];
    }
}

export abstract class ODataQueryOptionsGetSingle<T> extends ODataQueryOptionBase {

}

export abstract class ODataQueryFilterOptions<T> extends ODataQueryOptionsGetSingle<T> {

    abstract Get(): Observable<T[]>;
    abstract Get(id: string): Observable<T>;

    abstract Count(): Observable<number>;

    abstract List(): Observable<T[]>;
    abstract List(withCount: boolean): Observable<ListWithCount<T>>;

    abstract Function<TResult>(methodName: string, key: string, params?: any): Observable<TResult>;
    abstract Action<T>(methodName: string, key: string, value?: any): Observable<T>;

    /**
        * Selects properties on the elements. Works on Get() and Get(id).
        * 
        * @param {keyof T | (keyof T)[]} properties Use comma separated names without spaces
        * @returns {ODataQueryOptions<T>} 
        * 
        * @memberof ODataQueryOptions
        */
    Select(properties: keyof T | (keyof T)[]): ODataQueryFilterOptions<T> {
        if (typeof properties === "string")
            this.addToQuery("$select=" + properties);
        else
            this.addToQuery("$select=" + (<(keyof T)[]>properties).join(","));
        return this;
    }

    /**
        * Orders elements by the given property. Works only on Get()
        * 
        * @param {string} property Property on dataset to order by
        * @param {Order} [order=asc] Order "asc" for ascending and "desc" for descending.
        * @returns {ODataQueryFilterOptions<T>} 
        * 
        * @memberof ODataQueryFilterOptions
        */
    OrderBy(property: keyof T, order?: Order): ODataQueryFilterOptions<T> {
        this.addToQuery("$orderby=" + property + order ? " " + order : "");
        return this;
    }

    /**
        * Top selects the given number of element. Works only on Get()
        * 
        * @param {number} select number of elements to select
        * @returns {ODataQueryFilterOptions<T>} 
        * 
        * @memberof ODataQueryFilterOptions
        */
    Top(select: number): ODataQueryFilterOptions<T> {
        this.addToQuery("$top=" + select);
        return this;
    }

    /**
        * Skips the given number of elements and starts with element n + 1
        * 
        * @param {number} select Number of elements to skip
        * @returns {ODataQueryFilterOptions<T>} 
        * 
        * @memberof ODataQueryFilterOptions
        */
    Skip(select: number): ODataQueryFilterOptions<T> {
        this.addToQuery("$skip=" + select);
        return this;
    }

    /**
        * Filters by given criteria. See odata $filter convention for information on syntax.
        * 
        * @param {string} filter Filter syntax specified by odata V4 standard.
        * @returns {ODataQueryFilterOptions<T>} 
        * 
        * @memberof ODataQueryFilterOptions
        */
    Filter(filter: string): ODataQueryFilterOptions<T> {
        this.addToQuery("$filter=" + filter);
        return this;
    }


    /**
        * Expands given property or array of properties.
        * 
        * @param {(keyof T | (keyof T)[])} properties Properties to expand on.
        * @returns {ODataQueryFilterOptions<T>}
        * 
        * @memberof ODataQueryFilterOptions
        */
    Expand(properties: keyof T | (keyof T)[]): ODataQueryFilterOptions<T> {
        if (typeof properties === "string")
            this.addToQuery("$expand=" + properties);
        else
            this.addToQuery("$expand=" + (<(keyof T)[]>properties).join(","));
        return this;
    }

    /**
        * Searches for a value in the entity set as specified in OData protocol
        * 
        * @param {string} searchExpression Search specified in OData protocol
        * @returns {ODataQueryFilterOptions<T>} 
        * 
        * @memberof ODataQueryFilterOptions
        */
    Search(searchExpression: string): ODataQueryFilterOptions<T> {
        this.addToQuery("$search=" + searchExpression)
        return this;
    }

    Custom(customData: string): ODataQueryFilterOptions<T> {
        this.addToQuery(customData);
        return this;
    }
}

export type Order = "asc" | "desc";

export type Partial<T> = {
    [P in keyof T]?: T[P];
};

export interface ListWithCount<T> {
    items: T[];
    count: number;
};

/**
   *
   * A generic entity set which represents the content of the entity container.
   *
   * @export
   * @class EntitySet
   * @template T
   */
 export class EntitySet<T> extends ODataQueryFilterOptions<T> {

    /**
     * Creates an instance of EntitySet.
     *
     * @param {string} name of the EntitySet (Will determine the address of the entityset, too -> address + "/" + name)
     * @param {string} address of the service
     * @param {string} key of the EntitySet
     * @param {Header} [headers] additional headers: Per default there are "Content-Type" and "Accept".
     *
     * @memberOf EntitySet
     */
    constructor(name: string, address: string, key: string, protected http: HttpClient, additionalHeaders?: Header) {
      super();
      this.Name = name;
      this.Address = address.replace(/\/$/, "") + "/" + name;
      this.Key = key;
      this.Headers = { "Content-Type": "application/json", Accept: "application/json" };

      for (var attrname in additionalHeaders) { this.Headers[attrname] = additionalHeaders[attrname]; };
    }

    /**
     * Name of the Entity Set (which is appended to the URI)
     * @memberOf EntitySet
     */
    readonly Name: string;
    /**
     * Address of the OData Service
     * @memberOf EntitySet
     */
    readonly Address: string;

    /**
     * All headers appended to each request.
     *
     * @type {Header}
     * @memberOf EntitySet
     */
    readonly Headers: Header;

    /**
     * Key of the entity
     * @memberOf EntitySet
     */
    readonly Key: string;

    /**
     * Gets all entries of an entity set. Use method chaining (call.Skip(10).Top(10).Get() before you call this method to create a query.
     *
     * @returns {Observable<T[]>}
     *
     * @memberof EntitySet
     */
    Get(): Observable<T[]>
    /**
     * Gets one entry of the entity set by id.
     *
     * @param {string} id
     * @returns {Observable<T>}
     *
     * @memberof EntitySet
     */
    Get(id: string): Observable<T>;
    Get(id?: string): Observable<T | T[]> {
      let requri: string;
      if (id) {
        requri = this.Address + "(" + id + ")";
      } else {
        requri = this.Address;
      }
      requri += this.resolveODataOptions();
      this.emptyQuery();
      let request: Request = {
        headers: this.Headers,
        method: Method[Method.GET],
        requestUri: requri
      }

      return oData.request<T | T[]>(request, this.http).pipe(
        map((data: any) => id ? data : data.value)
      );
    }

    /**
    * Alias for Get() method
    */
    List(): Observable<T[]>;

    /**
    * Returns list of entries of an entity set.
    * @param withCount
    * @returns
    */
    List(withCount: boolean): Observable<ListWithCount<T>>;
    List(withCount?: boolean): Observable<T[] | ListWithCount<T>> {
      if (withCount) {
        this.Custom('$count=true');

        const requri = this.Address + this.resolveODataOptions();
        this.emptyQuery();
        let request: Request = {
          headers: this.Headers,
          method: Method[Method.GET],
          requestUri: requri
        }

        return oData.request(request, this.http).pipe(
          map((data: any) => ({ items: data.value, count: data['@odata.count'] }))
        );
      }
      return this.Get();
    }

    /**
     * Replaces an existing value in the entity collection.
     *
     * @param {T} value to replace
     * @returns {Observable<T>} for async Operation. Use `await` keyword to get value or `.then` callback.
     *
     * @memberOf EntitySet
     */
    Put(value: T): Observable<void> {
      let request: Request = {
        headers: this.Headers,
        method: Method[Method.PUT],
        requestUri: this.Address + "(" + (value as any)[this.Key] + ")",
        data: value
      }
      return oData.request(request, this.http);
    }

    /**
     * Adds a new entry to an EntitySet
     *
     * @param {T} value to ad to the EntitySet
     * @returns {Observable<T>} for async Operation. Use `await` keyword to get value or `.then` callback.
     *
     * @memberOf EntitySet
     */
    Post(value: T): Observable<T> {
      let request: Request = {
        headers: this.Headers,
        method: Method[Method.POST],
        requestUri: this.Address,
        data: value
      }
      return oData.request<T>(request, this.http);
    }
    Patch(key: string, delta: Partial<T> | T): Observable<void>
    Patch(key: string, oldvalue: T, newValue: T): Observable<void>
    Patch(key: string, oldvalordelta: T | Partial<T>, newval?: T): Observable<void> {
      if (newval)
        oldvalordelta = this.getDelta(oldvalordelta as T, newval);

      let request: Request = {
        headers: this.Headers,
        method: Method[Method.PATCH],
        requestUri: this.Address + "(" + key + ")",
        data: oldvalordelta
      }
      return oData.request(request, this.http);
    }

    private getDelta(oldval: T, newVal: T): Partial<T> {
      let ret: any = {};
      for (let prop in newVal)
        if (oldval[prop] != newVal[prop])
          ret[prop] = newVal[prop];
      return ret;
    }
    /**
     * Deletes a value from the entity set.
     *
     * @param {T} value to delete
     * @returns {Observable<T>} for async Operation. Use `await` keyword to get value or `.then` callback.
     *
     * @memberOf EntitySet
     */
    Delete(value: T): Observable<void> {
      let request: Request = {
        headers: this.Headers,
        method: Method[Method.DELETE],
        requestUri: this.Address + `(${(value as any)[this.Key]})`
      }
      return oData.request(request, this.http);
    }

    Count(): Observable<number> {
      const requri = this.Address + "/$count/" + this.resolveODataOptions();
      let request: Request = {
        headers: this.Headers,
        method: Method[Method.GET],
        requestUri: requri
      }

      return oData.request<number>(request, this.http);
    }

    Function<TResult>(methodName: string, key: string, params?: any): Observable<TResult> {
      const methodParams = params ? Object.entries(params).map(([key, value]) => `${key}=${oData.quoteString(value)}`) : [];
      const requri = this.Address + `/(${key})/${methodName}` + (methodParams.length ? `(${methodParams.join(',')})` : '');
      this.emptyQuery();
      let request: Request = {
        headers: this.Headers,
        method: Method[Method.GET],
        requestUri: requri
      }
      return oData.request<TResult>(request, this.http).pipe(
        map((data: any) => data.value || data),
        catchError(error => throwError(() => error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body)))
      );
    }

    Related<TRelatedEntity>(key: string, relatedEntitySetName: string): EntitySet<TRelatedEntity> {
      return new EntitySet(relatedEntitySetName, this.Address + `(${key})/`, 'id', this.http);
    }

    Action<TResult>(methodName: string, key: string, value?: any): Observable<TResult> {
      const requri = this.Address + `(${key})/${methodName}`;
      this.emptyQuery();
      let request: Request = {
        headers: this.Headers,
        method: Method[Method.POST],
        requestUri: requri,
        data: value && Object.keys(value).length ? value : null
      }
      return oData.request<TResult>(request, this.http).pipe(
        map((data: any) => data.value || data),
        catchError(error => throwError(() => error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body)))
      );
    }
  }


class EntityContainer {
    constructor(name: string, uri: string) {
        this.Name = name;
        this.Uri = uri;
    }
    readonly Name: string;
    readonly Uri: string;
}

export interface Request {
    requestUri: string,
    method: string,
    headers: Header | Header[],
    data?: any
}

export interface Header { [name: string]: string }

export class oData {
  static async request<TResult>(request: Request, http: HttpClient): Observable<TResult> {
    const headers = new HttpHeaders();
    Object.entries(request.headers).forEach(entry => headers.append(entry[0], entry[1]));
    return http.request<TResult>(request.method, request.requestUri, {
    headers: headers,
    body: request.data,
    responseType: 'json'
    });
  }

  static quoteString(value: any): string {
    return typeof (value) === 'string' ? `'${this.escapeString(value)}'` : value + '';
  }

  static escapeString(value: string): string {
      return encodeURIComponent(value.replace(/\'/g, "''"));
  }
}